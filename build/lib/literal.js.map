{"version":3,"sources":["literal.ts"],"names":[],"mappings":"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","file":"literal.js","sourcesContent":["import * as ts from 'typescript';\n\nimport * as base from './base';\nimport {FacadeConverter} from './facade_converter';\nimport {Transpiler} from './main';\n\nexport default class LiteralTranspiler extends base.TranspilerBase {\n  constructor(tr: Transpiler, private fc: FacadeConverter) { super(tr); }\n\n  visitNode(node: ts.Node): boolean {\n    switch (node.kind) {\n      // Literals.\n      case ts.SyntaxKind.NumericLiteral:\n        let nLit = <ts.LiteralExpression>node;\n        this.emit(nLit.getText());\n        break;\n      case ts.SyntaxKind.StringLiteral:\n        let sLit = <ts.LiteralExpression>node;\n        let text = JSON.stringify(sLit.text);\n        // Escape dollar sign since dart will interpolate in double quoted literal\n        text = text.replace(/\\$/, '\\\\$');\n        this.emit(text);\n        break;\n      case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n        this.emit(`'''${this.escapeTextForTemplateString(node)}'''`);\n        break;\n      case ts.SyntaxKind.TemplateMiddle:\n        this.emitNoSpace(this.escapeTextForTemplateString(node));\n        break;\n      case ts.SyntaxKind.TemplateExpression:\n        let tmpl = <ts.TemplateExpression>node;\n        if (tmpl.head) this.visit(tmpl.head);\n        if (tmpl.templateSpans) this.visitEach(tmpl.templateSpans);\n        break;\n      case ts.SyntaxKind.TemplateHead:\n        this.emit(`'''${this.escapeTextForTemplateString(node)}`);  // highlighting bug:'\n        break;\n      case ts.SyntaxKind.TemplateTail:\n        this.emitNoSpace(this.escapeTextForTemplateString(node));\n        this.emitNoSpace(`'''`);\n        break;\n      case ts.SyntaxKind.TemplateSpan:\n        let span = <ts.TemplateSpan>node;\n        if (span.expression) {\n          // Do not emit extra whitespace inside the string template\n          this.emitNoSpace('${');\n          this.visit(span.expression);\n          this.emitNoSpace('}');\n        }\n        if (span.literal) this.visit(span.literal);\n        break;\n      case ts.SyntaxKind.ArrayLiteralExpression:\n        if (this.shouldBeConst(node)) this.emit('const');\n        let ale = <ts.ArrayLiteralExpression>node;\n        this.handleReifiedArray(ale);\n        this.emit('[');\n        this.visitList(ale.elements);\n        this.emit(']');\n        break;\n      case ts.SyntaxKind.ObjectLiteralExpression:\n        let ole = <ts.ObjectLiteralExpression>node;\n        if (this.fc.maybeHandleProvider(ole)) return true;\n        if (this.shouldBeConst(node)) this.emit('const');\n        this.handleReifiedMap(ole);\n        this.emit('{');\n        this.visitList(ole.properties);\n        this.emit('}');\n        break;\n      case ts.SyntaxKind.PropertyAssignment:\n        let propAssign = <ts.PropertyAssignment>node;\n        if (propAssign.name.kind === ts.SyntaxKind.Identifier) {\n          // Dart identifiers in Map literals need quoting.\n          this.emitNoSpace(' \\'');\n          this.emitNoSpace((<ts.Identifier>propAssign.name).text);\n          this.emitNoSpace('\\'');\n        } else {\n          this.visit(propAssign.name);\n        }\n        this.emit(':');\n        this.visit(propAssign.initializer);\n        break;\n      case ts.SyntaxKind.ShorthandPropertyAssignment:\n        let shorthand = <ts.ShorthandPropertyAssignment>node;\n        this.emitNoSpace(' \\'');\n        this.emitNoSpace(shorthand.name.text);\n        this.emitNoSpace('\\'');\n        this.emit(':');\n        this.visit(shorthand.name);\n        break;\n\n      case ts.SyntaxKind.TrueKeyword:\n        this.emit('true');\n        break;\n      case ts.SyntaxKind.FalseKeyword:\n        this.emit('false');\n        break;\n      case ts.SyntaxKind.NullKeyword:\n        this.emit('null');\n        break;\n      case ts.SyntaxKind.RegularExpressionLiteral:\n        this.emit('new RegExp (');\n        this.emit('r\\'');\n        let regExp = (<ts.LiteralExpression>node).text;\n        let slashIdx = regExp.lastIndexOf('/');\n        let flags = regExp.substring(slashIdx + 1);\n        regExp = regExp.substring(1, slashIdx);            // cut off /.../ chars.\n        regExp = regExp.replace(/'/g, '\\' + \"\\'\" + r\\'');  // handle nested quotes by concatenation.\n        this.emitNoSpace(regExp);\n        this.emitNoSpace('\\'');\n        if (flags.indexOf('g') === -1) {\n          // Dart RegExps are always global, so JS regexps must use 'g' so that semantics match.\n          this.reportError(node, 'Regular Expressions must use the //g flag');\n        }\n        if (flags.indexOf('m') !== -1) {\n          this.emit(', multiLine: true');\n        }\n        if (flags.indexOf('i') !== -1) {\n          this.emit(', caseSensitive: false');\n        }\n        this.emit(')');\n        break;\n      case ts.SyntaxKind.ThisKeyword:\n        this.emit('this');\n        break;\n\n      default:\n        return false;\n    }\n    return true;\n  }\n\n  private shouldBeConst(n: ts.Node): boolean {\n    return this.hasAncestor(n, ts.SyntaxKind.Decorator) || this.fc.isInsideConstExpr(n);\n  }\n\n  private escapeTextForTemplateString(n: ts.Node): string {\n    return (<ts.StringLiteral>n).text.replace(/\\\\/g, '\\\\\\\\').replace(/([$'])/g, '\\\\$1');\n  }\n\n  private handleReifiedArray(node: ts.ArrayLiteralExpression) {\n    if (node.parent.kind !== ts.SyntaxKind.TypeAssertionExpression) return;\n    let ta = <ts.TypeAssertion>node.parent;\n    if (ta.type.kind !== ts.SyntaxKind.ArrayType) return;\n    this.emit('<');\n    this.visit((<ts.ArrayTypeNode>ta.type).elementType);\n    this.emit('>');\n    return true;\n  }\n\n\n  private handleReifiedMap(node: ts.ObjectLiteralExpression) {\n    if (node.parent.kind !== ts.SyntaxKind.TypeAssertionExpression) return;\n    let ta = <ts.TypeAssertion>node.parent;\n    if (ta.type.kind !== ts.SyntaxKind.TypeLiteral) return;\n    let it = this.maybeDestructureIndexType(<ts.TypeLiteralNode>ta.type);\n    if (!it) {\n      this.reportError(node, 'expected {[k]: v} type on object literal');\n      return;\n    }\n    this.emit('<');\n    this.visit(it[0]);\n    this.emit(',');\n    this.visit(it[1]);\n    this.emit('>');\n  }\n}\n"]}