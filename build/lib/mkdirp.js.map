{"version":3,"sources":["mkdirp.ts"],"names":[],"mappings":";AAAA,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAE7B,gBAA+B,CAAS;IACtC,+FAA+F;IAC/F,iFAAiF;IACjF,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAEzB,IAAI,YAAY,GAAG,EAAE,CAAC;IACtB,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,OAAO;QAC/B,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;QAChD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YACjC,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;AACL,CAAC;AAbD;2BAaC,CAAA","file":"mkdirp.js","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\nexport default function mkdirP(p: string) {\n  // Convert input path to absolute and then relative so that we always have relative path in the\n  // end. This can be made simpler when path.isAbsolute is available in node v0.12.\n  p = path.resolve(p);\n  p = path.relative('', p);\n\n  let pathToCreate = '';\n  p.split(path.sep).forEach(dirName => {\n    pathToCreate = path.join(pathToCreate, dirName);\n    if (!fs.existsSync(pathToCreate)) {\n      fs.mkdirSync(pathToCreate);\n    }\n  });\n}\n"]}