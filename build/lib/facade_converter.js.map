{"version":3,"sources":["facade_converter.ts"],"names":[],"mappings":"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","file":"facade_converter.js","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\n\nimport * as base from './base';\nimport {Transpiler} from './main';\n\ntype CallHandler = (c: ts.CallExpression, context: ts.Expression) => void;\ntype PropertyHandler = (c: ts.PropertyAccessExpression) => void;\ntype Set = {\n  [s: string]: boolean\n};\n\nconst FACADE_DEBUG = false;\n\nconst DEFAULT_LIB_MARKER = '__ts2dart_default_lib';\nconst PROVIDER_IMPORT_MARKER = '__ts2dart_has_provider_import';\nconst TS2DART_PROVIDER_COMMENT = '@ts2dart_Provider';\n\nfunction merge(...args: {[key: string]: any}[]): {[key: string]: any} {\n  let returnObject: {[key: string]: any} = {};\n  for (let arg of args) {\n    for (let key of Object.getOwnPropertyNames(arg)) {\n      returnObject[key] = arg[key];\n    }\n  }\n  return returnObject;\n}\n\nexport class FacadeConverter extends base.TranspilerBase {\n  private tc: ts.TypeChecker;\n  private defaultLibLocation: string;\n  private candidateProperties: {[propertyName: string]: boolean} = {};\n  private candidateTypes: {[typeName: string]: boolean} = {};\n  private genericMethodDeclDepth = 0;\n\n  constructor(transpiler: Transpiler) {\n    super(transpiler);\n\n    this.extractPropertyNames(this.callHandlers, this.candidateProperties);\n    this.extractPropertyNames(this.propertyHandlers, this.candidateProperties);\n    this.extractPropertyNames(this.tsToDartTypeNames, this.candidateTypes);\n  }\n\n  initializeTypeBasedConversion(\n      tc: ts.TypeChecker, opts: ts.CompilerOptions, host: ts.CompilerHost) {\n    this.tc = tc;\n    this.defaultLibLocation = ts.getDefaultLibFilePath(opts).replace(/\\.d\\.ts$/, '');\n    this.resolveModuleNames(opts, host, this.callHandlers);\n    this.resolveModuleNames(opts, host, this.propertyHandlers);\n    this.resolveModuleNames(opts, host, this.tsToDartTypeNames);\n    this.resolveModuleNames(opts, host, this.callHandlerReplaceNew);\n  }\n\n  private extractPropertyNames(m: ts.Map<ts.Map<any>>, candidates: {[k: string]: boolean}) {\n    for (let fileName of Object.keys(m)) {\n      const file = m[fileName];\n      Object.keys(file)\n          .map((propName) => propName.substring(propName.lastIndexOf('.') + 1))\n          .forEach((propName) => candidates[propName] = true);\n    }\n  }\n\n  private resolveModuleNames(\n      opts: ts.CompilerOptions, host: ts.CompilerHost, m: ts.Map<ts.Map<any>>) {\n    for (let mn of Object.keys(m)) {\n      let actual: string;\n      let absolute: string;\n      if (mn === DEFAULT_LIB_MARKER) {\n        actual = this.defaultLibLocation;\n      } else {\n        let resolved = ts.resolveModuleName(mn, '', opts, host);\n        if (!resolved.resolvedModule) continue;\n        actual = resolved.resolvedModule.resolvedFileName.replace(/(\\.d)?\\.ts$/, '');\n        // TypeScript's resolution returns relative paths here, but uses absolute ones in\n        // SourceFile.fileName later. Make sure to hit both use cases.\n        absolute = path.resolve(actual);\n      }\n      if (FACADE_DEBUG) console.log('Resolved module', mn, '->', actual);\n      m[actual] = m[mn];\n      if (absolute) m[absolute] = m[mn];\n    }\n  }\n\n  /**\n   * To avoid strongly referencing the Provider class (which could bloat binary size), Angular 2\n   * write providers as object literals. However the Dart transformers don't recognize this, so\n   * ts2dart translates the special syntax `/* @ts2dart_Provider * / {provide: Class, param1: ...}`\n   * into `const Provider(Class, param1: ...)`.\n   */\n  maybeHandleProvider(ole: ts.ObjectLiteralExpression): boolean {\n    if (!this.hasMarkerComment(ole, TS2DART_PROVIDER_COMMENT)) return false;\n    let classParam: ts.Expression;\n    let remaining = ole.properties.filter((e) => {\n      if (e.kind !== ts.SyntaxKind.PropertyAssignment) {\n        this.reportError(e, TS2DART_PROVIDER_COMMENT + ' elements must be property assignments');\n      }\n      if ('provide' === base.ident(e.name)) {\n        classParam = (e as ts.PropertyAssignment).initializer;\n        return false;\n      }\n      return true;  // include below.\n    });\n\n    if (!classParam) {\n      this.reportError(ole, 'missing provide: element');\n      return false;\n    }\n\n    this.emit('const Provider(');\n    this.visit(classParam);\n    if (remaining.length > 0) {\n      this.emit(',');\n      for (let i = 0; i < remaining.length; i++) {\n        let e = remaining[i];\n        if (e.kind !== ts.SyntaxKind.PropertyAssignment) this.visit(e.name);\n        this.emit(base.ident(e.name));\n        this.emit(':');\n        this.visit((e as ts.PropertyAssignment).initializer);\n        if ((i + 1) < remaining.length) this.emit(',');\n      }\n      this.emit(')');\n    }\n    return true;\n  }\n\n  maybeHandleCall(c: ts.CallExpression): boolean {\n    if (!this.tc) return false;\n    let {context, symbol} = this.getCallInformation(c);\n    if (!symbol) {\n      // getCallInformation returns a symbol if we understand this call.\n      return false;\n    }\n    let handler = this.getHandler(c, symbol, this.callHandlers);\n    return handler && !handler(c, context);\n  }\n\n  handlePropertyAccess(pa: ts.PropertyAccessExpression): boolean {\n    if (!this.tc) return;\n    let ident = pa.name.text;\n    if (!this.candidateProperties.hasOwnProperty(ident)) return false;\n    let symbol = this.tc.getSymbolAtLocation(pa.name);\n    if (!symbol) {\n      if (!this.stdlibTypeReplacements[ident]) {\n          this.reportMissingType(pa, ident);\n      }\n      return false;\n    }\n\n    let handler = this.getHandler(pa, symbol, this.propertyHandlers);\n    return handler && !handler(pa);\n  }\n\n  /**\n   * Searches for type references that require extra imports and emits the imports as necessary.\n   */\n  emitExtraImports(sourceFile: ts.SourceFile) {\n    let libraries = <ts.Map<string>>{\n      'XMLHttpRequest': 'dart:html',\n      'KeyboardEvent': 'dart:html',\n      'Uint8Array': 'dart:typed_arrays',\n      'ArrayBuffer': 'dart:typed_arrays',\n        'Promise': 'dart:async',\n        'HttpRequest.getString': 'dart:html',\n    };\n    let emitted: Set = {};\n    this.emitImports(sourceFile, libraries, emitted, sourceFile);\n  }\n\n  private emitImports(\n      n: ts.Node, libraries: ts.Map<string>, emitted: Set, sourceFile: ts.SourceFile): void {\n    if (n.kind === ts.SyntaxKind.TypeReference) {\n      let type = base.ident((<ts.TypeReferenceNode>n).typeName);\n      if (libraries.hasOwnProperty(type)) {\n        let toEmit = libraries[type];\n        if (!emitted[toEmit]) {\n          this.emit(`import '${toEmit}';`);\n          emitted[toEmit] = true;\n        }\n      }\n    }\n\n    // Support for importing \"Provider\" in case /* @ts2dart_Provider */ comments are present.\n    if (n.kind === ts.SyntaxKind.ImportDeclaration) {\n      // See if there is already code importing 'Provider' from angular2/core.\n      let id = n as ts.ImportDeclaration;\n      if ((id.moduleSpecifier as ts.StringLiteral).text === 'angular2/core') {\n        if (id.importClause.namedBindings.kind === ts.SyntaxKind.NamedImports) {\n          let ni = id.importClause.namedBindings as ts.NamedImports;\n          for (let nb of ni.elements) {\n            if (base.ident(nb.name) === 'Provider') {\n              emitted[PROVIDER_IMPORT_MARKER] = true;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (!emitted[PROVIDER_IMPORT_MARKER] && this.hasMarkerComment(n, TS2DART_PROVIDER_COMMENT)) {\n      // if 'Provider' has not been imported yet, and there's a @ts2dart_Provider, add it.\n      this.emit(`import \"package:angular2/core.dart\" show Provider;`);\n      emitted[PROVIDER_IMPORT_MARKER] = true;\n    }\n\n    n.getChildren(sourceFile)\n        .forEach((child: ts.Node) => this.emitImports(child, libraries, emitted, sourceFile));\n  }\n\n  pushTypeParameterNames(n: ts.FunctionLikeDeclaration) {\n    if (!n.typeParameters) return;\n    this.genericMethodDeclDepth++;\n  }\n\n  popTypeParameterNames(n: ts.FunctionLikeDeclaration) {\n    if (!n.typeParameters) return;\n    this.genericMethodDeclDepth--;\n  }\n\n  resolvePropertyTypes(tn: ts.TypeNode): ts.Map<ts.PropertyDeclaration> {\n    let res: ts.Map<ts.PropertyDeclaration> = {};\n    if (!tn || !this.tc) return res;\n\n    let t = this.tc.getTypeAtLocation(tn);\n    for (let sym of this.tc.getPropertiesOfType(t)) {\n      let decl = sym.valueDeclaration || (sym.declarations && sym.declarations[0]);\n      if (decl.kind !== ts.SyntaxKind.PropertyDeclaration &&\n          decl.kind !== ts.SyntaxKind.PropertySignature) {\n        let msg = this.tc.getFullyQualifiedName(sym) +\n            ' used for named parameter definition must be a property';\n        this.reportError(decl, msg);\n        continue;\n      }\n      res[sym.name] = <ts.PropertyDeclaration>decl;\n    }\n    return res;\n  }\n\n  /**\n   * The Dart Development Compiler (DDC) has a syntax extension that uses comments to emulate\n   * generic methods in Dart. ts2dart has to hack around this and keep track of which type names\n   * in the current scope are actually DDC type parameters and need to be emitted in comments.\n   *\n   * TODO(martinprobst): Remove this once the DDC hack has made it into Dart proper.\n   */\n  private isGenericMethodTypeParameterName(name: ts.EntityName): boolean {\n    // Avoid checking this unless needed.\n    if (this.genericMethodDeclDepth === 0 || !this.tc) return false;\n    // Check if the type of the name is a TypeParameter.\n    let t = this.tc.getTypeAtLocation(name);\n    if (!t || (t.flags & ts.TypeFlags.TypeParameter) === 0) return false;\n\n    // Check if the symbol we're looking at is the type parameter.\n    let symbol = this.tc.getSymbolAtLocation(name);\n    if (symbol !== t.symbol) return false;\n\n    // Check that the Type Parameter has been declared by a function declaration.\n    return symbol.declarations.some(\n        // Constructors are handled separately.\n        d => d.parent.kind === ts.SyntaxKind.FunctionDeclaration ||\n            d.parent.kind === ts.SyntaxKind.MethodDeclaration ||\n            d.parent.kind === ts.SyntaxKind.MethodSignature);\n  }\n\n  visitTypeName(typeName: ts.EntityName) {\n    if (typeName.kind !== ts.SyntaxKind.Identifier) {\n      this.visit(typeName);\n      return;\n    }\n    let ident = base.ident(typeName);\n    if (this.isGenericMethodTypeParameterName(typeName)) {\n      // DDC generic methods hack - all names that are type parameters to generic methods have to be\n      // emitted in comments.\n      this.emit('dynamic/*=');\n      this.emit(ident);\n      this.emit('*/');\n      return;\n    }\n\n    if (this.candidateTypes.hasOwnProperty(ident) && this.tc) {\n      let symbol = this.tc.getSymbolAtLocation(typeName);\n      if (!symbol) {\n        if (!this.stdlibTypeReplacements[ident]) {\n          this.reportMissingType(typeName, ident);\n        } else {\n          this.emit(this.stdlibTypeReplacements[ident]);\n          if (ident == 'require') {\n              this.emitBefore('import \\'dart:html\\';', 'import');\n          } else if (ident == 'Math') {\n              this.emitBefore('import \\'dart:math\\' as Math;', 'import');\n          }\n        }\n        return;\n      }\n        if (this.stdlibTypeReplacements[ident]) {\n            this.emit(this.stdlibTypeReplacements[ident]);\n            return;\n        }\n      let fileAndName = this.getFileAndName(typeName, symbol);\n      if (fileAndName) {\n        let fileSubs = this.tsToDartTypeNames[fileAndName.fileName];\n        if (fileSubs && fileSubs.hasOwnProperty(fileAndName.qname)) {\n          this.emit(fileSubs[fileAndName.qname]);\n          return;\n        }\n      }\n    }\n    this.emit(ident);\n  }\n\n  shouldEmitNew(c: ts.CallExpression): boolean {\n    if (!this.tc) return true;\n\n    let ci = this.getCallInformation(c);\n    let symbol = ci.symbol;\n    // getCallInformation returns a symbol if we understand this call.\n    if (!symbol) return true;\n\n    let loc = this.getFileAndName(c, symbol);\n    if (!loc) return true;\n    let {fileName, qname} = loc;\n    let fileSubs = this.callHandlerReplaceNew[fileName];\n    if (!fileSubs) return true;\n    return !fileSubs[qname];\n  }\n\n  private getCallInformation(c: ts.CallExpression): {context?: ts.Expression, symbol?: ts.Symbol} {\n    let symbol: ts.Symbol;\n    let context: ts.Expression;\n    let ident: string;\n    let expr = c.expression;\n\n    if (expr.kind === ts.SyntaxKind.Identifier) {\n      // Function call.\n      ident = base.ident(expr);\n      if (!this.candidateProperties.hasOwnProperty(ident)) return {};\n      symbol = this.tc.getSymbolAtLocation(expr);\n\n      if (!symbol) {\n        this.reportMissingType(c, ident);\n        return {};\n      }\n\n      context = null;\n    } else if (expr.kind === ts.SyntaxKind.PropertyAccessExpression) {\n      // Method call.\n      let pa = <ts.PropertyAccessExpression>expr;\n      ident = base.ident(pa.name);\n      if (!this.candidateProperties.hasOwnProperty(ident)) return {};\n\n      symbol = this.tc.getSymbolAtLocation(pa);\n\n      // Error will be reported by PropertyAccess handling below.\n      if (!symbol) return {};\n\n      context = pa.expression;\n    }\n    return {context, symbol};\n  }\n\n  private getHandler<T>(n: ts.Node, symbol: ts.Symbol, m: ts.Map<ts.Map<T>>): T {\n    let loc = this.getFileAndName(n, symbol);\n    if (!loc) return null;\n    let {fileName, qname} = loc;\n    let fileSubs = m[fileName];\n    if (!fileSubs) return null;\n    return fileSubs[qname];\n  }\n\n  private getFileAndName(n: ts.Node, originalSymbol: ts.Symbol): {fileName: string, qname: string} {\n    let symbol = originalSymbol;\n    while (symbol.flags & ts.SymbolFlags.Alias) symbol = this.tc.getAliasedSymbol(symbol);\n    let decl = symbol.valueDeclaration;\n    if (!decl) {\n      // In the case of a pure declaration with no assignment, there is no value declared.\n      // Just grab the first declaration, hoping it is declared once.\n      if (!symbol.declarations || symbol.declarations.length === 0) {\n        this.reportError(n, 'no declarations for symbol ' + originalSymbol.name);\n        return null;\n      }\n      decl = symbol.declarations[0];\n    }\n\n    const canonicalFileName = decl.getSourceFile().fileName.replace(/(\\.d)?\\.ts$/, '');\n\n    let qname = this.tc.getFullyQualifiedName(symbol);\n    // Some Qualified Names include their file name. Might be a bug in TypeScript,\n    // for the time being just special case.\n    if (symbol.flags & (ts.SymbolFlags.Class | ts.SymbolFlags.Function | ts.SymbolFlags.Variable)) {\n      qname = symbol.getName();\n    }\n    if (FACADE_DEBUG) console.error('cfn:', canonicalFileName, 'qn:', qname);\n    return {fileName: canonicalFileName, qname};\n  }\n\n  private isNamedDefaultLibType(node: ts.Node, qname: string): boolean {\n    let symbol = this.tc.getTypeAtLocation(node).getSymbol();\n    if (!symbol) return false;\n    let actual = this.getFileAndName(node, symbol);\n    return actual.fileName === this.defaultLibLocation && qname === actual.qname;\n  }\n\n  private reportMissingType(n: ts.Node, ident: string) {\n    this.reportError(\n        n, `Untyped property access to \"${ident}\" which could be ` +\n            `a special ts2dart builtin. ` +\n            `Please add type declarations to disambiguate.`);\n  }\n\n  private static DECLARATIONS: {[k: number]: boolean} = {\n    [ts.SyntaxKind.ClassDeclaration]: true,\n    [ts.SyntaxKind.FunctionDeclaration]: true,\n    [ts.SyntaxKind.InterfaceDeclaration]: true,\n    [ts.SyntaxKind.MethodDeclaration]: true,\n    [ts.SyntaxKind.PropertyDeclaration]: true,\n    [ts.SyntaxKind.PropertyDeclaration]: true,\n    [ts.SyntaxKind.VariableDeclaration]: true,\n  };\n\n  isInsideConstExpr(node: ts.Node): boolean {\n    while (node.parent) {\n      if (node.parent.kind === ts.SyntaxKind.Parameter &&\n          (node.parent as ts.ParameterDeclaration).initializer === node) {\n        // initializers of parameters must be const in Dart.\n        return true;\n      }\n      if (this.isConstExpr(node)) return true;\n      node = node.parent;\n      if (FacadeConverter.DECLARATIONS[node.kind]) {\n        // Stop walking upwards when hitting a declaration - @ts2dart_const should only propagate\n        // to the immediate declaration it applies to (but should be transitive in expressions).\n        return false;\n      }\n    }\n    return false;\n  }\n\n  isConstClass(decl: base.ClassLike) {\n    return this.hasConstComment(decl) || this.hasAnnotation(decl.decorators, 'CONST') ||\n        (<ts.NodeArray<ts.Declaration>>decl.members).some((m) => {\n          if (m.kind !== ts.SyntaxKind.Constructor) return false;\n          return this.hasAnnotation(m.decorators, 'CONST');\n        });\n  }\n\n  /**\n   * isConstExpr returns true if the passed in expression itself is a const expression. const\n   * expressions are marked by the special comment @ts2dart_const (expr), or by the special\n   * function call CONST_EXPR.\n   */\n  isConstExpr(node: ts.Node): boolean {\n    if (!node) return false;\n\n    if (this.hasConstComment(node)) {\n      return true;\n    }\n\n    return node.kind === ts.SyntaxKind.CallExpression &&\n        base.ident((<ts.CallExpression>node).expression) === 'CONST_EXPR';\n  }\n\n  hasConstComment(node: ts.Node): boolean { return this.hasMarkerComment(node, '@ts2dart_const'); }\n\n  private hasMarkerComment(node: ts.Node, markerText: string): boolean {\n    let text = node.getFullText();\n    let comments = ts.getLeadingCommentRanges(text, 0);\n    if (!comments) return false;\n    for (let c of comments) {\n      let commentText = text.substring(c.pos, c.end);\n      if (commentText.indexOf(markerText) !== -1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private emitMethodCall(name: string, args?: ts.Expression[]) {\n    this.emit('.');\n    this.emitCall(name, args);\n  }\n\n  private emitCall(name: string, args?: ts.Expression[]) {\n    this.emit(name);\n    this.emit('(');\n    if (args) this.visitList(args);\n    this.emit(')');\n  }\n\n  private stdlibTypeReplacements: ts.Map<string> = {\n    'Date': 'DateTime',\n    'Array': 'List',\n    'XMLHttpRequest': 'HttpRequest',\n    'Uint8Array': 'Uint8List',\n    'ArrayBuffer': 'ByteBuffer',\n    'Promise': 'Future',\n      'undefined': 'null',\n      'replace': 'replaceFirst',\n    'require': 'HttpRequest.getString',\n    'then': 'then',\n      'Object': 'Map',\n      'parseFloat': 'double.parse',\n      'parseInt': 'int.parse',\n      'Math': 'Math',\n\n    // Dart has two different incompatible DOM APIs\n    // https://github.com/angular/angular/issues/2770\n    'Node': 'dynamic',\n    'Text': 'dynamic',\n    'Element': 'dynamic',\n    'Event': 'dynamic',\n    'HTMLElement': 'dynamic',\n    'HTMLAnchorElement': 'dynamic',\n    'HTMLStyleElement': 'dynamic',\n    'HTMLInputElement': 'dynamic',\n    'HTMLDocument': 'dynamic',\n    'History': 'dynamic',\n    'Location': 'dynamic',\n  };\n\n  private tsToDartTypeNames: ts.Map<ts.Map<string>> = {\n    [DEFAULT_LIB_MARKER]: this.stdlibTypeReplacements,\n    'angular2/src/facade/lang': {'Date': 'DateTime'},\n\n    'rxjs/Observable': {'Observable': 'Stream'},\n    'es6-promise/es6-promise': {'Promise': 'Future'},\n    'es6-shim/es6-shim': {'Promise': 'Future'},\n  };\n\n  private es6Promises: ts.Map<CallHandler> = {\n    'Promise.catch': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emit('.catchError(');\n      this.visitList(c.arguments);\n      this.emit(')');\n    },\n    'Promise.then': (c: ts.CallExpression, context: ts.Expression) => {\n      // then() in Dart doesn't support 2 arguments.\n      this.visit(context);\n      this.emit('.then(');\n      this.visit(c.arguments[0]);\n      this.emit(')');\n      if (c.arguments.length > 1) {\n        this.emit('.catchError(');\n        this.visit(c.arguments[1]);\n        this.emit(')');\n      }\n    },\n    'Promise': (c: ts.CallExpression, context: ts.Expression) => {\n      if (c.kind !== ts.SyntaxKind.NewExpression) return true;\n      this.assert(c, c.arguments.length === 1, 'Promise construction must take 2 arguments.');\n      this.assert(\n          c, c.arguments[0].kind === ts.SyntaxKind.ArrowFunction ||\n              c.arguments[0].kind === ts.SyntaxKind.FunctionExpression,\n          'Promise argument must be a function expression (or arrow function).');\n      let callback: ts.FunctionLikeDeclaration;\n      if (c.arguments[0].kind === ts.SyntaxKind.ArrowFunction) {\n        callback = <ts.FunctionLikeDeclaration>(<ts.ArrowFunction>c.arguments[0]);\n      } else if (c.arguments[0].kind === ts.SyntaxKind.FunctionExpression) {\n        callback = <ts.FunctionLikeDeclaration>(<ts.FunctionExpression>c.arguments[0]);\n      }\n      this.assert(\n          c, callback.parameters.length > 0 && callback.parameters.length < 3,\n          'Promise executor must take 1 or 2 arguments (resolve and reject).');\n\n      const completerVarName = this.uniqueId('completer');\n      this.assert(\n          c, callback.parameters[0].name.kind === ts.SyntaxKind.Identifier,\n          'First argument of the Promise executor is not a straight parameter.');\n      let resolveParameterIdent = <ts.Identifier>(callback.parameters[0].name);\n\n      this.emit('(() {');  // Create a new scope.\n      this.emit(`Completer ${completerVarName} = new Completer();`);\n      this.emit('var');\n      this.emit(resolveParameterIdent.text);\n      this.emit(`= ${completerVarName}.complete;`);\n\n      if (callback.parameters.length === 2) {\n        this.assert(\n            c, callback.parameters[1].name.kind === ts.SyntaxKind.Identifier,\n            'First argument of the Promise executor is not a straight parameter.');\n        let rejectParameterIdent = <ts.Identifier>(callback.parameters[1].name);\n        this.emit('var');\n        this.emit(rejectParameterIdent.text);\n        this.emit(`= ${completerVarName}.completeError;`);\n      }\n      this.emit('(()');\n      this.visit(callback.body);\n      this.emit(')();');\n      this.emit(`return ${completerVarName}.future;`);\n      this.emit('})()');\n    },\n  };\n\n  private es6Collections: ts.Map<CallHandler> = {\n    'Map.set': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emit('[');\n      this.visit(c.arguments[0]);\n      this.emit(']');\n      this.emit('=');\n      this.visit(c.arguments[1]);\n    },\n    'Map.get': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emit('[');\n      this.visit(c.arguments[0]);\n      this.emit(']');\n    },\n    'Map.has': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emitMethodCall('containsKey', c.arguments);\n    },\n    'Map.delete': (c: ts.CallExpression, context: ts.Expression) => {\n      // JS Map.delete(k) returns whether k was present in the map,\n      // convert to:\n      // (Map.containsKey(k) && (Map.remove(k) !== null || true))\n      // (Map.remove(k) !== null || true) is required to always returns true\n      // when Map.containsKey(k)\n      this.emit('(');\n      this.visit(context);\n      this.emitMethodCall('containsKey', c.arguments);\n      this.emit('&& (');\n      this.visit(context);\n      this.emitMethodCall('remove', c.arguments);\n      this.emit('!= null || true ) )');\n    },\n    'Map.forEach': (c: ts.CallExpression, context: ts.Expression) => {\n      let cb: any;\n      let params: any;\n\n      switch (c.arguments[0].kind) {\n        case ts.SyntaxKind.FunctionExpression:\n          cb = <ts.FunctionExpression>(c.arguments[0]);\n          params = cb.parameters;\n          if (params.length !== 2) {\n            this.reportError(c, 'Map.forEach callback requires exactly two arguments');\n            return;\n          }\n          this.visit(context);\n          this.emit('. forEach ( (');\n          this.visit(params[1]);\n          this.emit(',');\n          this.visit(params[0]);\n          this.emit(')');\n          this.visit(cb.body);\n          this.emit(')');\n          break;\n\n        case ts.SyntaxKind.ArrowFunction:\n          cb = <ts.ArrowFunction>(c.arguments[0]);\n          params = cb.parameters;\n          if (params.length !== 2) {\n            this.reportError(c, 'Map.forEach callback requires exactly two arguments');\n            return;\n          }\n          this.visit(context);\n          this.emit('. forEach ( (');\n          this.visit(params[1]);\n          this.emit(',');\n          this.visit(params[0]);\n          this.emit(')');\n          if (cb.body.kind !== ts.SyntaxKind.Block) {\n            this.emit('=>');\n          }\n          this.visit(cb.body);\n          this.emit(')');\n          break;\n\n        default:\n          this.visit(context);\n          this.emit('. forEach ( ( k , v ) => (');\n          this.visit(c.arguments[0]);\n          this.emit(') ( v , k ) )');\n          break;\n      }\n    },\n    'Array.find': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emit('. firstWhere (');\n      this.visit(c.arguments[0]);\n      this.emit(', orElse : ( ) => null )');\n    },\n  };\n\n  private stdlibHandlers: ts.Map<CallHandler> = merge(this.es6Promises, this.es6Collections, {\n    'Array.push': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emitMethodCall('add', c.arguments);\n    },\n    'Array.pop': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emitMethodCall('removeLast');\n    },\n    'Array.shift': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emit('. removeAt ( 0 )');\n    },\n    'Array.unshift': (c: ts.CallExpression, context: ts.Expression) => {\n      this.emit('(');\n      this.visit(context);\n      if (c.arguments.length === 1) {\n        this.emit('.. insert ( 0,');\n        this.visit(c.arguments[0]);\n        this.emit(') ) . length');\n      } else {\n        this.emit('.. insertAll ( 0, [');\n        this.visitList(c.arguments);\n        this.emit(']) ) . length');\n      }\n    },\n    'Array.map': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emitMethodCall('map', c.arguments);\n      this.emitMethodCall('toList');\n    },\n    'Array.filter': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emitMethodCall('where', c.arguments);\n      this.emitMethodCall('toList');\n    },\n    'Array.some': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emitMethodCall('any', c.arguments);\n    },\n    'Array.slice': (c: ts.CallExpression, context: ts.Expression) => {\n      this.emitCall('ListWrapper.slice', [context, ...c.arguments]);\n    },\n    'Array.splice': (c: ts.CallExpression, context: ts.Expression) => {\n      this.emitCall('ListWrapper.splice', [context, ...c.arguments]);\n    },\n    'Array.concat': (c: ts.CallExpression, context: ts.Expression) => {\n      this.emit('( new List . from (');\n      this.visit(context);\n      this.emit(')');\n      c.arguments.forEach(arg => {\n        if (!this.isNamedDefaultLibType(arg, 'Array')) {\n          this.reportError(arg, 'Array.concat only takes Array arguments');\n        }\n        this.emit('.. addAll (');\n        this.visit(arg);\n        this.emit(')');\n      });\n      this.emit(')');\n    },\n    'Array.join': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      if (c.arguments.length) {\n        this.emitMethodCall('join', c.arguments);\n      } else {\n        this.emit('. join ( \",\" )');\n      }\n    },\n    'Array.reduce': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n\n      if (c.arguments.length >= 2) {\n        this.emitMethodCall('fold', [c.arguments[1], c.arguments[0]]);\n      } else {\n        this.emit('. fold ( null ,');\n        this.visit(c.arguments[0]);\n        this.emit(')');\n      }\n    },\n    'ArrayConstructor.isArray': (c: ts.CallExpression, context: ts.Expression) => {\n      this.emit('( (');\n      this.visitList(c.arguments);  // Should only be 1.\n      this.emit(')');\n      this.emit('is List');\n      this.emit(')');\n    },\n    'Console.log': (c: ts.CallExpression, context: ts.Expression) => {\n      this.emit('print(');\n      if (c.arguments.length === 1) {\n        this.visit(c.arguments[0]);\n      } else {\n        this.emit('[');\n        this.visitList(c.arguments);\n        this.emit('].join(\" \")');\n      }\n      this.emit(')');\n    },\n    'RegExp.exec': (c: ts.CallExpression, context: ts.Expression) => {\n      if (context.kind !== ts.SyntaxKind.RegularExpressionLiteral) {\n        // Fail if the exec call isn't made directly on a regexp literal.\n        // Multiple exec calls on the same global regexp have side effects\n        // (each return the next match), which we can't reproduce with a simple\n        // Dart RegExp (users should switch to some facade / wrapper instead).\n        this.reportError(\n            c, 'exec is only supported on regexp literals, ' +\n                'to avoid side-effect of multiple calls on global regexps.');\n      }\n      if (c.parent.kind === ts.SyntaxKind.ElementAccessExpression) {\n        // The result of the exec call is used for immediate indexed access:\n        // this use-case can be accommodated by RegExp.firstMatch, which returns\n        // a Match instance with operator[] which returns groups (special index\n        // 0 returns the full text of the match).\n        this.visit(context);\n        this.emitMethodCall('firstMatch', c.arguments);\n      } else {\n        // In the general case, we want to return a List. To transform a Match\n        // into a List of its groups, we alias it in a local closure that we\n        // call with the Match value. We are then able to use the group method\n        // to generate a List large enough to hold groupCount groups + the\n        // full text of the match at special group index 0.\n        this.emit('((match) => new List.generate(1 + match.groupCount, match.group))(');\n        this.visit(context);\n        this.emitMethodCall('firstMatch', c.arguments);\n        this.emit(')');\n      }\n    },\n    'RegExp.test': (c: ts.CallExpression, context: ts.Expression) => {\n      this.visit(context);\n      this.emitMethodCall('hasMatch', c.arguments);\n    },\n    'String.substr': (c: ts.CallExpression, context: ts.Expression) => {\n      this.reportError(\n          c, 'substr is unsupported, use substring (but beware of the different semantics!)');\n      this.visit(context);\n      this.emitMethodCall('substr', c.arguments);\n    },\n  });\n\n  private callHandlerReplaceNew: ts.Map<ts.Map<boolean>> = {\n    [DEFAULT_LIB_MARKER]: {'Promise': true},\n  };\n\n  private callHandlers: ts.Map<ts.Map<CallHandler>> = {\n    [DEFAULT_LIB_MARKER]: this.stdlibHandlers,\n    'angular2/manual_typings/globals': this.es6Collections,\n    'angular2/src/facade/collection': {\n      'Map': (c: ts.CallExpression, context: ts.Expression): boolean => {\n        // The actual Map constructor is special cased for const calls.\n        if (!this.isInsideConstExpr(c)) return true;\n        if (c.arguments.length) {\n          this.reportError(c, 'Arguments on a Map constructor in a const are unsupported');\n        }\n        if (c.typeArguments) {\n          this.emit('<');\n          this.visitList(c.typeArguments);\n          this.emit('>');\n        }\n        this.emit('{ }');\n        return false;\n      },\n    },\n    'angular2/src/core/di/forward_ref': {\n      'forwardRef': (c: ts.CallExpression, context: ts.Expression) => {\n        // The special function forwardRef translates to an unwrapped value in Dart.\n        const callback = <ts.FunctionExpression>c.arguments[0];\n        if (callback.kind !== ts.SyntaxKind.ArrowFunction) {\n          this.reportError(c, 'forwardRef takes only arrow functions');\n          return;\n        }\n        this.visit(callback.body);\n      },\n    },\n    'angular2/src/facade/lang': {\n      'CONST_EXPR': (c: ts.CallExpression, context: ts.Expression) => {\n        // `const` keyword is emitted in the array literal handling, as it needs to be transitive.\n        this.visitList(c.arguments);\n      },\n      'normalizeBlank': (c: ts.CallExpression, context: ts.Expression) => {\n        // normalizeBlank is a noop in Dart, so erase it.\n        this.visitList(c.arguments);\n      },\n    },\n  };\n\n  private es6CollectionsProp: ts.Map<PropertyHandler> = {\n    'Map.size': (p: ts.PropertyAccessExpression) => {\n      this.visit(p.expression);\n      this.emit('.');\n      this.emit('length');\n    },\n  };\n  private es6PromisesProp: ts.Map<PropertyHandler> = {\n    'PromiseConstructor.resolve': (p: ts.PropertyAccessExpression) => {\n      this.emit('new ');\n      this.visit(p.expression);\n      this.emit('.value');\n    },\n    'PromiseConstructor.reject': (p: ts.PropertyAccessExpression) => {\n      this.emit('new ');\n      this.visit(p.expression);\n      this.emit('.error');\n    },\n  };\n\n  private propertyHandlers: ts.Map<ts.Map<PropertyHandler>> = {\n    [DEFAULT_LIB_MARKER]: merge(this.es6CollectionsProp, this.es6PromisesProp),\n  };\n}\n"]}