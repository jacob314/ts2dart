{"version":3,"sources":["main.ts"],"names":[],"mappings":";;AAEA,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,EAAE,CAAC;AACxC,2BAAiC,YAAY,CAAC,CAAA;AAC9C,IAAY,EAAE,WAAM,IAAI,CAAC,CAAA;AACzB,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,EAAE,WAAM,YAAY,CAAC,CAAA;AAGjC,uBAAmB,UAAU,CAAC,CAAA;AAC9B,qBAA2B,QAAQ,CAAC,CAAA;AACpC,4BAAkC,eAAe,CAAC,CAAA;AAClD,2BAAiC,cAAc,CAAC,CAAA;AAChD,uBAA6B,UAAU,CAAC,CAAA;AACxC,0BAAgC,aAAa,CAAC,CAAA;AAC9C,qBAA2B,QAAQ,CAAC,CAAA;AACpC,wBAA8B,WAAW,CAAC,CAAA;AAC1C,iCAA8B,oBAAoB,CAAC,CAAA;AACnD,IAAY,SAAS,WAAM,YAAY,CAAC,CAAA;AA8B3B,wBAAgB,GAAuB;IAClD,oBAAoB,EAAE,IAAI;IAC1B,sBAAsB,EAAE,IAAI;IAC5B,MAAM,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ;IAC9B,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG;CAC5B,CAAC;AAEF;IAYE,oBAAoB,OAA+B;QAAvC,uBAAuC,GAAvC,YAAuC;QAA/B,YAAO,GAAP,OAAO,CAAwB;QARnD,kGAAkG;QAClG,oDAAoD;QAC5C,mBAAc,GAAW,CAAC,CAAC,CAAC;QAC5B,WAAM,GAAa,EAAE,CAAC;QAM5B,mEAAmE;QACnE,IAAI,CAAC,EAAE,GAAG,IAAI,kCAAe,CAAC,IAAI,CAAC,CAAC;QACpC,IAAI,CAAC,WAAW,GAAG;YACjB,IAAI,iBAAc,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;YACjC,IAAI,wBAAqB,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,4BAA4B,CAAC;YAC9E,IAAI,uBAAoB,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;YACvC,IAAI,oBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;YACpC,IAAI,mBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,OAAO,CAAC,mBAAmB,CAAC;YAChE,IAAI,sBAAmB,CAAC,IAAI,CAAC;YAC7B,IAAI,iBAAc,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC;SAClC,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,8BAAS,GAAT,UAAU,SAAmB,EAAE,WAAoB;QAAnD,iBA8DC;QA7DC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;QACrF,CAAC;QACD,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAtC,CAAsC,CAAC,CAAC;QAEzE,IAAI,IAAqB,CAAC;QAC1B,IAAI,YAAgC,CAAC;QACrC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC1B,IAAA,mGACgF,EAD3E,kBAAM,EAAE,gBAAK,CAC+D;YACjF,EAAE,CAAC,CAAC,KAAK,CAAC;gBAAC,MAAM,IAAI,KAAK,CAAC,EAAE,CAAC,4BAA4B,CAAC,KAAK,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;YACrF,IAAA,mGACgE,EAD3D,oBAAO,EAAE,kBAAM,CAC6C;YACjE,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;gBAC5B,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAA1B,CAA0B,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAC5E,CAAC;YACD,IAAI,GAAG,EAAE,CAAC,kBAAkB,CAAC,OAAO,EAAE,kBAAkB,CAAC,IAAI,CAAC,CAAC;YAC/D,YAAY,GAAG,OAAO,CAAC;YACvB,EAAE,CAAC,CAAC,YAAY,CAAC,OAAO,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAC;gBAClE,qDAAqD;gBACrD,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,YAAY,CAAC,OAAO,CAAC;YAC/C,CAAC;YACD,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,IAAI,IAAI,IAAI,WAAW,IAAI,IAAI,CAAC,CAAC,CAAC;gBACvD,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC;YACpC,CAAC;QACH,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;YACjC,YAAY,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC3C,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;YAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEvF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC;YACvD,MAAM,IAAI,KAAK,CACX,4DAA4D,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC5F,CAAC;QACD,IAAI,eAAe,GAAG,WAAW,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;QACjE,IAAI,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,SAAS,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,EAAE,CAAC,6BAA6B,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QACtF,CAAC;QAED,mDAAmD;QACnD,IAAI,OAAO,GAA2B,EAAE,CAAC;QACzC,SAAS,CAAC,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,OAAO,CAAC,CAAC,CAAC,GAAG,IAAI,EAAjB,CAAiB,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QAEjB,OAAO,CAAC,cAAc,EAAE;aACnB,MAAM,CAAC,UAAC,UAAU,IAAK,OAAA,OAAO,CAAC,UAAU,CAAC,QAAQ,CAAC,EAA5B,CAA4B,CAAC;aAEpD,MAAM,CAAC,UAAC,UAAyB,IAAK,OAAA,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,EAAtC,CAAsC,CAAC;aAC7E,OAAO,CAAC,UAAC,CAAgB;YACxB,IAAI,QAAQ,GAAG,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,UAAU,GAAG,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,EAAE,eAAe,CAAC;iBAC3D,OAAO,CAAC,UAAU,EAAE,UAAS,EAAE,IAAE,MAAM,CAAC,GAAG,GAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAA,CAAC,CAAC,CAAC;YACrE,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC;gBAC5B,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACzC,mBAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YACjC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACtB,EAAE,CAAC,aAAa,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QACP,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAC/B,CAAC;IAED,qCAAgB,GAAhB,UAAiB,OAAmB,EAAE,IAAqB;QAA3D,iBAcC;QAbC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC,EAAE,CAAC,6BAA6B,CACjC,OAAO,CAAC,cAAc,EAAE,EAAE,OAAO,CAAC,kBAAkB,EAAE,EAAE,IAAI,CAAC,CAAC;QACpE,CAAC;QACD,IAAI,KAAK,GAA6B,EAAE,CAAC;QACzC,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,OAAO,CAAC,cAAc,EAAE;aACnB,MAAM,CACH,UAAC,UAAyB;YACtB,OAAA,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAAnF,CAAmF,CAAC;aAC3F,OAAO,CAAC,UAAC,CAAC,IAAK,OAAA,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAArC,CAAqC,CAAC,CAAC;QAC3D,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAC7B,MAAM,CAAC,KAAK,CAAC;IACf,CAAC;IAEO,uCAAkB,GAA1B;QACE,IAAI,IAAI,GAAuB,EAAE,CAAC;QAClC,GAAG,CAAC,CAAU,UAA6B,EAA7B,KAAA,MAAM,CAAC,IAAI,CAAC,wBAAgB,CAAC,EAA7B,cAA6B,EAA7B,IAA6B,CAAC;YAAvC,IAAI,CAAC,SAAA;YAAmC,IAAI,CAAC,CAAC,CAAC,GAAG,wBAAgB,CAAC,CAAC,CAAC,CAAC;SAAA;QAC3E,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,uCAAkB,GAA1B;QACE,IAAI,kBAAkB,GAAG,EAAE,CAAC,qBAAqB,CAAC,wBAAgB,CAAC,CAAC;QACpE,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;QAC/D,IAAI,YAAY,GAAoB;YAClC,aAAa,EAAE,UAAC,UAAU,EAAE,eAAe;gBACzC,IAAI,UAAU,GAAG,UAAU,CAAC;gBAC5B,EAAE,CAAC,CAAC,UAAU,KAAK,kBAAkB,CAAC,CAAC,CAAC;oBACtC,UAAU,GAAG,EAAE,CAAC,qBAAqB,CAAC,wBAAgB,CAAC,CAAC;gBAC1D,CAAC;gBACD,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;oBAAC,MAAM,CAAC,SAAS,CAAC;gBACjD,IAAI,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;gBACpD,MAAM,CAAC,EAAE,CAAC,gBAAgB,CAAC,UAAU,EAAE,QAAQ,EAAE,wBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAClF,CAAC;YACD,SAAS,YAAC,IAAI,EAAE,IAAI,EAAE,kBAAkB,IAAI,EAAE,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YACvE,UAAU,EAAE,UAAC,QAAQ,IAAK,OAAA,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAvB,CAAuB;YACjD,QAAQ,EAAE,UAAC,QAAQ,IAAK,OAAA,EAAE,CAAC,YAAY,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAlC,CAAkC;YAC1D,qBAAqB,EAAE,cAAM,OAAA,kBAAkB,EAAlB,CAAkB;YAC/C,yBAAyB,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;YACrC,oBAAoB,EAAE,UAAC,QAAQ,IAAK,OAAA,QAAQ,EAAR,CAAQ;YAC5C,mBAAmB,EAAE,cAAM,OAAA,EAAE,EAAF,CAAE;YAC7B,UAAU,EAAE,cAAM,OAAA,IAAI,EAAJ,CAAI;SACvB,CAAC;QACF,YAAY,CAAC,kBAAkB,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAC;QAClE,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IAED,uBAAuB;IACvB,kCAAa,GAAb,UAAc,QAAgB,EAAE,eAAuB;QACrD,IAAI,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;QAC1D,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,CAAC;IACrE,CAAC;IAEO,8BAAS,GAAjB,UAAkB,UAAyB;QACzC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CACpB,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC/F,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QACvB,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC7C,CAAC;IAEO,+BAAU,GAAlB,UAAmB,IAAY,EAAE,OAAgB;QAC/C,IAAI,MAAM,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;YACjB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;QACD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;IACrB,CAAC;IAEO,mCAAc,GAAtB,UAAuB,OAAmB;QAA1C,iBAoBC;QAnBC,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QAEzB,IAAI,WAAW,GAAG,OAAO,CAAC,oBAAoB,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,uBAAuB,EAAE,CAAC,CAAC;QAE3F,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,WAAW,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;YAC5E,8FAA8F;YAC9F,sEAAsE;YACtE,8CAA8C;YAC9C,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,sBAAsB,EAAE,CAAC,CAAC;QACrE,CAAC;QAED,IAAI,cAAc,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,CAAC,IAAK,OAAA,KAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAA1B,CAA0B,CAAC,CAAC;QACxE,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,CAAC;YAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;QAElE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;YAClB,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACrC,CAAC,CAAC,IAAI,GAAG,cAAc,CAAC;YACxB,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAEO,uCAAkB,GAA1B,UAA2B,UAAyB;QAClD,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;YACpB,IAAI,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,6BAA6B,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC1E,IAAI,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5D,GAAG,IAAI,MAAI,EAAE,UAAI,GAAG,CAAC,IAAI,GAAG,CAAC,WAAI,GAAG,CAAC,SAAS,GAAG,CAAC,CAAE,CAAC;QACvD,CAAC;QACD,GAAG,IAAI,IAAI,CAAC;QACZ,GAAG,IAAI,EAAE,CAAC,4BAA4B,CAAC,UAAU,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;QACrE,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAED;;;OAGG;IACH,wCAAmB,GAAnB,UAAoB,QAAgB;QAClC,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,CAAC;QACvC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YACvF,MAAM,IAAI,KAAK,CAAC,2CAAyC,QAAQ,YAAO,IAAM,CAAC,CAAC;QAClF,CAAC;QACD,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACxC,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC7B,oDAAoD;YACpD,GAAG,GAAG,QAAQ,CAAC;QACjB,CAAC;QACD,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;IACpC,CAAC;IAED,yBAAI,GAAJ,UAAK,CAAS,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACxC,+BAAU,GAAV,UAAW,CAAS,EAAE,MAAc,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5E,gCAAW,GAAX,UAAY,CAAS,IAAI,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEtD,gCAAW,GAAX,UAAY,CAAU,EAAE,OAAe;QACrC,IAAI,IAAI,GAAG,CAAC,CAAC,aAAa,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC;QACjD,IAAI,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACvD,IAAI,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,GAAG,GAAG,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;QACpD,kCAAkC;QAClC,IAAI,WAAW,GAAM,QAAQ,UAAI,GAAG,CAAC,IAAI,GAAG,CAAC,WAAI,GAAG,CAAC,SAAS,GAAG,CAAC,WAAK,OAAS,CAAC;QACjF,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;YAAC,MAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChC,CAAC;IAED,0BAAK,GAAL,UAAM,IAAa;QAAnB,iBAuBC;QAtBC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;QACnC,IAAI,CAAC;YACH,IAAI,QAAQ,GAAG,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;YACtF,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACb,QAAQ,CAAC,OAAO,CAAC,UAAC,CAAC;oBACjB,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,KAAI,CAAC,cAAc,CAAC;wBAAC,MAAM,CAAC;oBACzC,KAAI,CAAC,cAAc,GAAG,CAAC,CAAC,GAAG,CAAC;oBAC5B,IAAI,IAAI,GAAG,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;oBACzD,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;oBACvB,KAAI,CAAC,IAAI,CAAC,KAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;oBACvC,EAAE,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC;wBAAC,KAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBACnD,CAAC,CAAC,CAAC;YACL,CAAC;YAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBACjD,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;oBAAC,MAAM,CAAC;YAClD,CAAC;YACD,IAAI,CAAC,WAAW,CACZ,IAAI,EAAE,2BAA+B,EAAG,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,UAAK,IAAI,CAAC,WAAW,EAAI,CAAC,CAAC;QAC/F,CAAE;QAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,kBAAkB,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;QACvD,CAAC;IACH,CAAC;IAEO,qCAAgB,GAAxB,UAAyB,IAAY,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IAEnE,qCAAgB,GAAxB,UAAyB,OAAe;QACtC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CAAC,CAAC;QAEzD,qEAAqE;QACrE,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC;QAC7C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QAC9C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QAE9C,6BAA6B;QAC7B,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;QAC1C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;QAC/C,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,CAAC;QAE9C,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IACH,iBAAC;AAAD,CArRA,AAqRC,IAAA;AArRY,kBAAU,aAqRtB,CAAA;AAED,2BAAkC,YAA6B;IAC7D,MAAM,CAAC,UAAC,WAAqB,EAAE,cAAsB;QACnD,IAAI,GAAG,GAAwB,EAAE,CAAC;QAClC,GAAG,CAAC,CAAY,UAAW,EAAX,2BAAW,EAAX,yBAAW,EAAX,IAAW,CAAC;YAAvB,IAAI,GAAG,oBAAA;YACV,IAAI,SAAS,GACT,EAAE,CAAC,sBAAsB,CAAC,GAAG,EAAE,cAAc,EAAE,wBAAgB,EAAE,YAAY,CAAC,CAAC;YACnF,EAAE,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC7B,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACnC,QAAQ,CAAC;YACX,CAAC;YACD,SAAS,GAAG,EAAE,CAAC,mBAAmB,CAAC,GAAG,EAAE,cAAc,EAAE,wBAAgB,EAAE,YAAY,CAAC,CAAC;YACxF,EAAE,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;gBAC7B,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;gBACnC,QAAQ,CAAC;YACX,CAAC;YACD,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SACrB;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC,CAAC;AACJ,CAAC;AAnBe,yBAAiB,oBAmBhC,CAAA;AAED;IASE,gBACY,WAA0B,EAAU,gBAAwB,EACpE,iBAA0B;QADlB,gBAAW,GAAX,WAAW,CAAe;QAAU,qBAAgB,GAAhB,gBAAgB,CAAQ;QAThE,WAAM,GAAW,EAAE,CAAC;QACpB,WAAM,GAAW,CAAC,CAAC;QACnB,SAAI,GAAW,CAAC,CAAC;QASvB,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,SAAS,GAAG,IAAI,+BAAkB,CAAC,EAAC,IAAI,EAAE,gBAAgB,GAAG,OAAO,EAAC,CAAC,CAAC;YAC5E,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,gBAAgB,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;QAC3E,CAAC;IACH,CAAC;IAEC,qBAAI,GAAJ,UAAK,GAAW;QACZ,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,2BAAU,GAAV,UAAW,GAAW,EAAE,MAAc;QAClC,IAAM,GAAG,GAAU,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAC/C,EAAE,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;YAAC,MAAM,CAAC;QACpB,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QAC/E,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YAClC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBAClB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YACpB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,IAAI,CAAC,MAAM,EAAE,CAAC;YAClB,CAAC;QACL,CAAC;IACL,CAAC;IAEH,4BAAW,GAAX,UAAY,GAAW;QACrB,IAAI,CAAC,MAAM,IAAI,GAAG,CAAC;QACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACpC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;gBACpB,IAAI,CAAC,IAAI,EAAE,CAAC;gBACZ,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAClB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,MAAM,EAAE,CAAC;YAChB,CAAC;QACH,CAAC;IACH,CAAC;IAED,0BAAS,GAAT,cAAsB,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;IAE7E,iCAAgB,GAAhB,UAAiB,CAAU;QACzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC;YAAC,MAAM,CAAC,CAAE,wBAAwB;QAC9D,IAAI,IAAI,GAAG,CAAC,CAAC,aAAa,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC;QACjD,IAAI,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,GAAG,GAAG,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC;QAEpD,IAAI,OAAO,GAAsB;YAC/B,QAAQ,EAAE,EAAC,IAAI,EAAE,GAAG,CAAC,IAAI,GAAG,CAAC,EAAE,MAAM,EAAE,GAAG,CAAC,SAAS,EAAC;YACrD,SAAS,EAAE,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM,EAAC;YACjD,MAAM,EAAE,IAAI,CAAC,gBAAgB;SAC9B,CAAC;QAEF,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IACrC,CAAC;IAEO,yCAAwB,GAAhC;QACE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC;YAAC,MAAM,CAAC,EAAE,CAAC;QAC/B,IAAI,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QAC9E,MAAM,CAAC,wDAAwD,GAAG,SAAS,CAAC;IAC9E,CAAC;IACH,aAAC;AAAD,CAxEA,AAwEC,IAAA;AAED;IACE,OAAO,CAAC,GAAG,CAAC,ovCAsBb,CAAC,CAAC;IACD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;AAClB,CAAC;AAED,kBAAkB;AAClB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;IAC5B,IAAI,IAAI,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAC,IAAI,EAAE,QAAQ,EAAC,CAAC,CAAC;IACxE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QAAC,QAAQ,EAAE,CAAC;IAC1B,IAAI,CAAC;QACH,IAAI,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;QACtC,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAC7D,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;IACjD,CAAE;IAAA,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACX,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,cAAc,CAAC;YAAC,MAAM,CAAC,CAAC;QACvC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;QACzB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC","file":"main.js","sourcesContent":["#! /usr/bin/env node\n\nrequire('source-map-support').install();\nimport {SourceMapGenerator} from 'source-map';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\n\nimport {TranspilerBase} from './base';\nimport mkdirP from './mkdirp';\nimport CallTranspiler from './call';\nimport DeclarationTranspiler from './declaration';\nimport ExpressionTranspiler from './expression';\nimport ModuleTranspiler from './module';\nimport StatementTranspiler from './statement';\nimport TypeTranspiler from './type';\nimport LiteralTranspiler from './literal';\nimport {FacadeConverter} from './facade_converter';\nimport * as dartStyle from 'dart-style';\n\nexport interface TranspilerOptions {\n  /**\n   * Fail on the first error, do not collect multiple. Allows easier debugging as stack traces lead\n   * directly to the offending line.\n   */\n  failFast?: boolean;\n  /** Whether to generate 'library a.b.c;' names from relative file paths. */\n  generateLibraryName?: boolean;\n  /** Whether to generate source maps. */\n  generateSourceMap?: boolean;\n  /** A tsconfig.json to use to configure TypeScript compilation. */\n  tsconfig?: string;\n  /**\n   * A base path to relativize absolute file paths against. This is useful for library name\n   * generation (see above) and nicer file names in error messages.\n   */\n  basePath?: string;\n  /**\n   * Translate calls to builtins, i.e. seemlessly convert from `Array` to `List`, and convert the\n   * corresponding methods. Requires type checking.\n   */\n  translateBuiltins?: boolean;\n  /**\n   * Enforce conventions of public/private keyword and underscore prefix\n   */\n  enforceUnderscoreConventions?: boolean;\n}\n\nexport const COMPILER_OPTIONS: ts.CompilerOptions = {\n  allowNonTsExtensions: true,\n  experimentalDecorators: true,\n  module: ts.ModuleKind.CommonJS,\n  target: ts.ScriptTarget.ES6,\n};\n\nexport class Transpiler {\n  private output: Output;\n  private currentFile: ts.SourceFile;\n\n  // Comments attach to all following AST nodes before the next 'physical' token. Track the earliest\n  // offset to avoid printing comments multiple times.\n  private lastCommentIdx: number = -1;\n  private errors: string[] = [];\n\n  private transpilers: TranspilerBase[];\n  private fc: FacadeConverter;\n\n  constructor(private options: TranspilerOptions = {}) {\n    // TODO: Remove the angular2 default when angular uses typingsRoot.\n    this.fc = new FacadeConverter(this);\n    this.transpilers = [\n      new CallTranspiler(this, this.fc),  // Has to come before StatementTranspiler!\n      new DeclarationTranspiler(this, this.fc, options.enforceUnderscoreConventions),\n      new ExpressionTranspiler(this, this.fc),\n      new LiteralTranspiler(this, this.fc),\n      new ModuleTranspiler(this, this.fc, options.generateLibraryName),\n      new StatementTranspiler(this),\n      new TypeTranspiler(this, this.fc),\n    ];\n  }\n\n  /**\n   * Transpiles the given files to Dart.\n   * @param fileNames The input files.\n   * @param destination Location to write files to. Creates files next to their sources if absent.\n   */\n  transpile(fileNames: string[], destination?: string): void {\n    if (this.options.basePath) {\n      this.options.basePath = this.normalizeSlashes(path.resolve(this.options.basePath));\n    }\n    fileNames = fileNames.map((f) => this.normalizeSlashes(path.resolve(f)));\n\n    let host: ts.CompilerHost;\n    let compilerOpts: ts.CompilerOptions;\n    if (this.options.tsconfig) {\n      let {config, error} =\n          ts.readConfigFile(this.options.tsconfig, (f) => fs.readFileSync(f, 'utf-8'));\n      if (error) throw new Error(ts.flattenDiagnosticMessageText(error.messageText, '\\n'));\n      let {options, errors} = ts.convertCompilerOptionsFromJson(\n          config.compilerOptions, path.dirname(this.options.tsconfig));\n      if (errors && errors.length) {\n        throw new Error(errors.map((d) => this.diagnosticToString(d)).join('\\n'));\n      }\n      host = ts.createCompilerHost(options, /*setParentNodes*/ true);\n      compilerOpts = options;\n      if (compilerOpts.rootDir != null && this.options.basePath == null) {\n        // Use the tsconfig's rootDir if basePath is not set.\n        this.options.basePath = compilerOpts.rootDir;\n      }\n      if (compilerOpts.outDir != null && destination == null) {\n        destination = compilerOpts.outDir;\n      }\n    } else {\n      host = this.createCompilerHost();\n      compilerOpts = this.getCompilerOptions();\n    }\n    if (this.options.basePath) this.options.basePath = path.resolve(this.options.basePath);\n\n    if (this.options.basePath && destination === undefined) {\n      throw new Error(\n          'Must have a destination path when a basePath is specified ' + this.options.basePath);\n    }\n    let destinationRoot = destination || this.options.basePath || '';\n    let program = ts.createProgram(fileNames, compilerOpts, host);\n    if (this.options.translateBuiltins) {\n      this.fc.initializeTypeBasedConversion(program.getTypeChecker(), compilerOpts, host);\n    }\n\n    // Only write files that were explicitly passed in.\n    let fileSet: {[s: string]: boolean} = {};\n    fileNames.forEach((f) => fileSet[f] = true);\n    this.errors = [];\n\n    program.getSourceFiles()\n        .filter((sourceFile) => fileSet[sourceFile.fileName])\n        // Do not generate output for .d.ts files.\n        .filter((sourceFile: ts.SourceFile) => !sourceFile.fileName.match(/\\.d\\.ts$/))\n        .forEach((f: ts.SourceFile) => {\n          let dartCode = this.translate(f);\n          let outputFile = this.getOutputPath(f.fileName, destinationRoot)\n              .replace(/([A-Z])/g, function($1){return \"_\"+$1.toLowerCase();});\n          if (outputFile.charAt(0) == '_')\n              outputFile = outputFile.substring(1);\n          mkdirP(path.dirname(outputFile));\n          console.log(dartCode);\n          fs.writeFileSync(outputFile, dartCode);\n        });\n    this.checkForErrors(program);\n  }\n\n  translateProgram(program: ts.Program, host: ts.CompilerHost): {[path: string]: string} {\n    if (this.options.translateBuiltins) {\n      this.fc.initializeTypeBasedConversion(\n          program.getTypeChecker(), program.getCompilerOptions(), host);\n    }\n    let paths: {[path: string]: string} = {};\n    this.errors = [];\n    program.getSourceFiles()\n        .filter(\n            (sourceFile: ts.SourceFile) =>\n                (!sourceFile.fileName.match(/\\.d\\.ts$/) && !!sourceFile.fileName.match(/\\.[jt]s$/)))\n        .forEach((f) => paths[f.fileName] = this.translate(f));\n    this.checkForErrors(program);\n    return paths;\n  }\n\n  private getCompilerOptions() {\n    let opts: ts.CompilerOptions = {};\n    for (let k of Object.keys(COMPILER_OPTIONS)) opts[k] = COMPILER_OPTIONS[k];\n    opts.rootDir = this.options.basePath;\n    return opts;\n  }\n\n  private createCompilerHost(): ts.CompilerHost {\n    let defaultLibFileName = ts.getDefaultLibFileName(COMPILER_OPTIONS);\n    defaultLibFileName = this.normalizeSlashes(defaultLibFileName);\n    let compilerHost: ts.CompilerHost = {\n      getSourceFile: (sourceName, languageVersion) => {\n        let sourcePath = sourceName;\n        if (sourceName === defaultLibFileName) {\n          sourcePath = ts.getDefaultLibFilePath(COMPILER_OPTIONS);\n        }\n        if (!fs.existsSync(sourcePath)) return undefined;\n        let contents = fs.readFileSync(sourcePath, 'UTF-8');\n        return ts.createSourceFile(sourceName, contents, COMPILER_OPTIONS.target, true);\n      },\n      writeFile(name, text, writeByteOrderMark) { fs.writeFile(name, text); },\n      fileExists: (filename) => fs.existsSync(filename),\n      readFile: (filename) => fs.readFileSync(filename, 'utf-8'),\n      getDefaultLibFileName: () => defaultLibFileName,\n      useCaseSensitiveFileNames: () => true,\n      getCanonicalFileName: (filename) => filename,\n      getCurrentDirectory: () => '',\n      getNewLine: () => '\\n',\n    };\n    compilerHost.resolveModuleNames = getModuleResolver(compilerHost);\n    return compilerHost;\n  }\n\n  // Visible for testing.\n  getOutputPath(filePath: string, destinationRoot: string): string {\n    let relative = this.getRelativeFileName(filePath);\n    let dartFile = relative.replace(/.(js|es6|ts)$/, '.dart');\n    return this.normalizeSlashes(path.join(destinationRoot, dartFile));\n  }\n\n  private translate(sourceFile: ts.SourceFile): string {\n    this.currentFile = sourceFile;\n    this.output = new Output(\n        sourceFile, this.getRelativeFileName(sourceFile.fileName), this.options.generateSourceMap);\n    this.lastCommentIdx = -1;\n    this.visit(sourceFile);\n    let result = this.output.getResult();\n    return this.formatCode(result, sourceFile);\n  }\n\n  private formatCode(code: string, context: ts.Node) {\n    let result = dartStyle.formatCode(code);\n    if (result.error) {\n      this.reportError(context, result.error);\n    }\n    return result.code;\n  }\n\n  private checkForErrors(program: ts.Program) {\n    let errors = this.errors;\n\n    let diagnostics = program.getGlobalDiagnostics().concat(program.getSyntacticDiagnostics());\n\n    if ((errors.length || diagnostics.length) && this.options.translateBuiltins) {\n      // Only report semantic diagnostics if ts2dart failed; this code is not a generic compiler, so\n      // only yields TS errors if they could be the cause of ts2dart issues.\n      // This greatly speeds up tests and execution.\n      diagnostics = diagnostics.concat(program.getSemanticDiagnostics());\n    }\n\n    let diagnosticErrs = diagnostics.map((d) => this.diagnosticToString(d));\n    if (diagnosticErrs.length) errors = errors.concat(diagnosticErrs);\n\n    if (errors.length) {\n      let e = new Error(errors.join('\\n'));\n      e.name = 'TS2DartError';\n      throw e;\n    }\n  }\n\n  private diagnosticToString(diagnostic: ts.Diagnostic): string {\n    let msg = '';\n    if (diagnostic.file) {\n      let pos = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n      let fn = this.getRelativeFileName(diagnostic.file.fileName);\n      msg += ` ${fn}:${pos.line + 1}:${pos.character + 1}`;\n    }\n    msg += ': ';\n    msg += ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n    return msg;\n  }\n\n  /**\n   * Returns `filePath`, relativized to the program's `basePath`.\n   * @param filePath path to relativize.\n   */\n  getRelativeFileName(filePath: string) {\n    let base = this.options.basePath || '';\n    if (filePath[0] === '/' && filePath.indexOf(base) !== 0 && !filePath.match(/\\.d\\.ts$/)) {\n      throw new Error(`Files must be located under base, got ${filePath} vs ${base}`);\n    }\n    let rel = path.relative(base, filePath);\n    if (rel.indexOf('../') === 0) {\n      // filePath is outside of rel, just use it directly.\n      rel = filePath;\n    }\n    return this.normalizeSlashes(rel);\n  }\n\n  emit(s: string) { this.output.emit(s); }\n  emitBefore(s: string, search: string) { this.output.emitBefore(s, search); }\n  emitNoSpace(s: string) { this.output.emitNoSpace(s); }\n\n  reportError(n: ts.Node, message: string) {\n    let file = n.getSourceFile() || this.currentFile;\n    let fileName = this.getRelativeFileName(file.fileName);\n    let start = n.getStart(file);\n    let pos = file.getLineAndCharacterOfPosition(start);\n    // Line and character are 0-based.\n    let fullMessage = `${fileName}:${pos.line + 1}:${pos.character + 1}: ${message}`;\n    if (this.options.failFast) throw new Error(fullMessage);\n    this.errors.push(fullMessage);\n  }\n\n  visit(node: ts.Node) {\n    this.output.addSourceMapping(node);\n    try {\n      let comments = ts.getLeadingCommentRanges(this.currentFile.text, node.getFullStart());\n      if (comments) {\n        comments.forEach((c) => {\n          if (c.pos <= this.lastCommentIdx) return;\n          this.lastCommentIdx = c.pos;\n          let text = this.currentFile.text.substring(c.pos, c.end);\n          this.emitNoSpace('\\n');\n          this.emit(this.translateComment(text));\n          if (c.hasTrailingNewLine) this.emitNoSpace('\\n');\n        });\n      }\n\n      for (let i = 0; i < this.transpilers.length; i++) {\n        if (this.transpilers[i].visitNode(node)) return;\n      }\n      this.reportError(\n          node, `Unsupported node type ${(<any>ts).SyntaxKind[node.kind]}: ${node.getFullText()}`);\n    } catch (e) {\n      this.reportError(node, 'ts2dart crashed ' + e.stack);\n    }\n  }\n\n  private normalizeSlashes(path: string) { return path.replace(/\\\\/g, '/'); }\n\n  private translateComment(comment: string): string {\n    comment = comment.replace(/\\{@link ([^\\}]+)\\}/g, '[$1]');\n\n    // Remove the following tags and following comments till end of line.\n    comment = comment.replace(/@param.*$/gm, '');\n    comment = comment.replace(/@throws.*$/gm, '');\n    comment = comment.replace(/@return.*$/gm, '');\n\n    // Remove the following tags.\n    comment = comment.replace(/@module/g, '');\n    comment = comment.replace(/@description/g, '');\n    comment = comment.replace(/@deprecated/g, '');\n\n    return comment;\n  }\n}\n\nexport function getModuleResolver(compilerHost: ts.CompilerHost) {\n  return (moduleNames: string[], containingFile: string): ts.ResolvedModule[] => {\n    let res: ts.ResolvedModule[] = [];\n    for (let mod of moduleNames) {\n      let lookupRes =\n          ts.nodeModuleNameResolver(mod, containingFile, COMPILER_OPTIONS, compilerHost);\n      if (lookupRes.resolvedModule) {\n        res.push(lookupRes.resolvedModule);\n        continue;\n      }\n      lookupRes = ts.classicNameResolver(mod, containingFile, COMPILER_OPTIONS, compilerHost);\n      if (lookupRes.resolvedModule) {\n        res.push(lookupRes.resolvedModule);\n        continue;\n      }\n      res.push(undefined);\n    }\n    return res;\n  };\n}\n\nclass Output {\n  private result: string = '';\n  private column: number = 1;\n  private line: number = 1;\n\n  // Position information.\n  private generateSourceMap: boolean;\n  private sourceMap: SourceMapGenerator;\n\n  constructor(\n      private currentFile: ts.SourceFile, private relativeFileName: string,\n      generateSourceMap: boolean) {\n    if (generateSourceMap) {\n      this.sourceMap = new SourceMapGenerator({file: relativeFileName + '.dart'});\n      this.sourceMap.setSourceContent(relativeFileName, this.currentFile.text);\n    }\n  }\n\n    emit(str: string) {\n        this.emitNoSpace(' ');\n        this.emitNoSpace(str);\n    }\n\n    emitBefore(str: string, search: string) {\n        const idx:number = this.result.indexOf(search);\n        if (idx < 0) return;\n        str = str + ' ';\n        this.result = this.result.substring(0, idx) + str + this.result.substring(idx);\n        for (let i = 0; i < str.length; i++) {\n            if (str[i] === '\\n') {\n                this.line++;\n                this.column = 0;\n            } else {\n                this.column++;\n            }\n        }\n    }\n\n  emitNoSpace(str: string) {\n    this.result += str;\n    for (let i = 0; i < str.length; i++) {\n      if (str[i] === '\\n') {\n        this.line++;\n        this.column = 0;\n      } else {\n        this.column++;\n      }\n    }\n  }\n\n  getResult(): string { return this.result + this.generateSourceMapComment(); }\n\n  addSourceMapping(n: ts.Node) {\n    if (!this.generateSourceMap) return;  // source maps disabled.\n    let file = n.getSourceFile() || this.currentFile;\n    let start = n.getStart(file);\n    let pos = file.getLineAndCharacterOfPosition(start);\n\n    let mapping: SourceMap.Mapping = {\n      original: {line: pos.line + 1, column: pos.character},\n      generated: {line: this.line, column: this.column},\n      source: this.relativeFileName,\n    };\n\n    this.sourceMap.addMapping(mapping);\n  }\n\n  private generateSourceMapComment() {\n    if (!this.sourceMap) return '';\n    let base64map = new Buffer(JSON.stringify(this.sourceMap)).toString('base64');\n    return '\\n\\n//# sourceMappingURL=data:application/json;base64,' + base64map;\n  }\n}\n\nfunction showHelp() {\n  console.log(`\nUsage: ts2dart [input-files] [arguments]\n\n  --help                            show this dialog\n  \n  --failFast                        Fail on the first error, do not collect multiple. Allows easier debugging \n                                    as stack traces lead directly to the offending line\n                          \n  --generateLibraryName             Whether to generate 'library a.b.c;' names from relative file paths.\n  \n  --generateSourceMap               Whether to generate source maps.\n  \n  --tsconfig                        A tsconfig.json to use to configure TypeScript compilation.\n  \n  --basePath                        A base path to relativize absolute file paths against. This\n                                    is useful for library name generation (see above) and nicer\n                                    file names in error messages.\n                          \n  --translateBuiltins               Translate calls to builtins, i.e. seemlessly convert from \\` Array\\` to \\` List\\`,\n                                    and convert the corresponding methods. Requires type checking.\n                                    \n  --enforceUnderscoreConventions    Enforce conventions of public/private keyword and underscore prefix\n`);\n  process.exit(0);\n}\n\n// CLI entry point\nif (require.main === module) {\n  let args = require('minimist')(process.argv.slice(2), {base: 'string'});\n  if (args.help) showHelp();\n  try {\n    let transpiler = new Transpiler(args);\n    console.error('Transpiling', args._, 'to', args.destination);\n    transpiler.transpile(args._, args.destination);\n  } catch (e) {\n    if (e.name !== 'TS2DartError') throw e;\n    console.error(e.message);\n    process.exit(1);\n  }\n}\n"]}