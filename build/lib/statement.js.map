{"version":3,"sources":["statement.ts"],"names":[],"mappings":"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","file":"statement.js","sourcesContent":["import * as ts from 'typescript';\nimport * as base from './base';\nimport {Transpiler} from './main';\n\ntype ClassLike = ts.ClassDeclaration | ts.InterfaceDeclaration;\n\nexport default class StatementTranspiler extends base.TranspilerBase {\n  constructor(tr: Transpiler) { super(tr); }\n\n  visitNode(node: ts.Node): boolean {\n    switch (node.kind) {\n      case ts.SyntaxKind.EmptyStatement:\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.ReturnStatement:\n        let retStmt = <ts.ReturnStatement>node;\n        this.emit('return');\n        if (retStmt.expression) this.visit(retStmt.expression);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.BreakStatement:\n      case ts.SyntaxKind.ContinueStatement:\n        let breakContinue = <ts.BreakOrContinueStatement>node;\n        this.emit(breakContinue.kind === ts.SyntaxKind.BreakStatement ? 'break' : 'continue');\n        if (breakContinue.label) this.visit(breakContinue.label);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.VariableStatement:\n        let variableStmt = <ts.VariableStatement>node;\n        this.visit(variableStmt.declarationList);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.ExpressionStatement:\n        let expr = <ts.ExpressionStatement>node;\n        this.visit(expr.expression);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.SwitchStatement:\n        let switchStmt = <ts.SwitchStatement>node;\n        this.emit('switch (');\n        this.visit(switchStmt.expression);\n        this.emit(')');\n        this.visit(switchStmt.caseBlock);\n        break;\n      case ts.SyntaxKind.CaseBlock:\n        this.emit('{');\n        this.visitEach((<ts.CaseBlock>node).clauses);\n        this.emit('}');\n        break;\n      case ts.SyntaxKind.CaseClause:\n        let caseClause = <ts.CaseClause>node;\n        this.emit('case');\n        this.visit(caseClause.expression);\n        this.emit(':');\n        this.visitEach(caseClause.statements);\n        break;\n      case ts.SyntaxKind.DefaultClause:\n        this.emit('default :');\n        this.visitEach((<ts.DefaultClause>node).statements);\n        break;\n      case ts.SyntaxKind.IfStatement:\n        let ifStmt = <ts.IfStatement>node;\n        this.emit('if (');\n        this.visit(ifStmt.expression);\n        this.emit(')');\n        this.visit(ifStmt.thenStatement);\n        if (ifStmt.elseStatement) {\n          this.emit('else');\n          this.visit(ifStmt.elseStatement);\n        }\n        break;\n      case ts.SyntaxKind.ForStatement:\n        let forStmt = <ts.ForStatement>node;\n        this.emit('for (');\n        if (forStmt.initializer) this.visit(forStmt.initializer);\n        this.emit(';');\n        if (forStmt.condition) this.visit(forStmt.condition);\n        this.emit(';');\n        if (forStmt.incrementor) this.visit(forStmt.incrementor);\n        this.emit(')');\n        this.visit(forStmt.statement);\n        break;\n      case ts.SyntaxKind.ForInStatement:\n        // TODO(martinprobst): Dart's for-in loops actually have different semantics, they are more\n        // like for-of loops, iterating over collections.\n        let forInStmt = <ts.ForInStatement>node;\n        this.emit('for (');\n        if (forInStmt.initializer) this.visit(forInStmt.initializer);\n        this.emit('in');\n        this.visit(forInStmt.expression);\n        this.emit(')');\n        this.visit(forInStmt.statement);\n        break;\n      case ts.SyntaxKind.ForOfStatement:\n        let forOfStmt = <ts.ForOfStatement>node;\n        this.emit('for (');\n        if (forOfStmt.initializer) this.visit(forOfStmt.initializer);\n        this.emit('in');\n        this.visit(forOfStmt.expression);\n        this.emit(')');\n        this.visit(forOfStmt.statement);\n        break;\n      case ts.SyntaxKind.WhileStatement:\n        let whileStmt = <ts.WhileStatement>node;\n        this.emit('while (');\n        this.visit(whileStmt.expression);\n        this.emit(')');\n        this.visit(whileStmt.statement);\n        break;\n      case ts.SyntaxKind.DoStatement:\n        let doStmt = <ts.DoStatement>node;\n        this.emit('do');\n        this.visit(doStmt.statement);\n        this.emit('while (');\n        this.visit(doStmt.expression);\n        this.emit(') ;');\n        break;\n\n      case ts.SyntaxKind.ThrowStatement:\n        let throwStmt = <ts.ThrowStatement>node;\n        let surroundingCatchClause = this.getAncestor(throwStmt, ts.SyntaxKind.CatchClause);\n        if (surroundingCatchClause) {\n          let ref = (<ts.CatchClause>surroundingCatchClause).variableDeclaration;\n          if (ref.getText() === throwStmt.expression.getText()) {\n            this.emit('rethrow');\n            this.emit(';');\n            break;\n          }\n        }\n\n        this.emit('throw');\n        this.visit(throwStmt.expression);\n        this.emit(';');\n        break;\n      case ts.SyntaxKind.TryStatement:\n        let tryStmt = <ts.TryStatement>node;\n        this.emit('try');\n        this.visit(tryStmt.tryBlock);\n        if (tryStmt.catchClause) {\n          this.visit(tryStmt.catchClause);\n        }\n        if (tryStmt.finallyBlock) {\n          this.emit('finally');\n          this.visit(tryStmt.finallyBlock);\n        }\n        break;\n      case ts.SyntaxKind.CatchClause:\n        let ctch = <ts.CatchClause>node;\n        if (ctch.variableDeclaration.type) {\n          this.emit('on');\n          this.visit(ctch.variableDeclaration.type);\n        }\n        this.emit('catch');\n        this.emit('(');\n        this.visit(ctch.variableDeclaration.name);\n        this.emit(',');\n        this.visit(ctch.variableDeclaration.name);\n        this.emitNoSpace('_stack');\n        this.emit(')');\n        this.visit(ctch.block);\n        break;\n\n      case ts.SyntaxKind.Block:\n        this.emit('{');\n        this.visitEach((<ts.Block>node).statements);\n        this.emit('}');\n        break;\n      default:\n        return false;\n    }\n    return true;\n  }\n}\n"]}